Transaction v2

Transaction is a message pack map with such structure
{
  "body": BinaryBody,
  "sign": Map,
  "ver": 2
}
keys should be encoded as strings.

Body contains msgpack encoded transaction payload, which intended for decoding
and signing. Unpacked body must be map and should have key "k" (string) which
indicates transaction kind (integer).
For best extendability transaction kind number unique for each kind with each
version. Headers with constans shoul be generated by scripts of supplied JSON
file (priv/tx_const.json in tpnode repo):

```

{
  "purpose": {
    "0": "transfer",
    "1": "srcfee",
    "2": "dstfee",
    "3": "gas"
  },
  "kind": {
    "16": ["generic", 2],
    "17": ["register", 2],
    "18": ["deploy", 2]
  }
}

```

Money transfer and call smartcontract transactions must contains following
fields

 - "f" (from) - source address, must be 8 byte binary (0xc4 msgpack type),
 - "to" (to) - destination address, must be 8 byte binary as well,
 - "s" (seq) - tx nonce, must be positive integer (0x00 - 0x7f or 0xcc - 0xcf)
 - "t" (timestamp) - tx unitime in milliseconds, positive integer exactly as seq,
 - "p" (payload) - array of amounts (see below)

Also there is optional attributes

- "c" (call) - for transaction intended to call smartcontract method. This
  attribute should contrains 2 element array (0x92), first element method name
 (string), second - array of arguments (arbitrary types, but tx call with 
 incorrect types will be dropped by smartcontract). 
 - "e" (extradata) - map with arbitrary extra data which might be used by
 smartcontract or wallet application. Key "code" reserverd for "deploy"
 method and should not be used for any other purposes (types 0x80 - 0x8f or
0xde - 0xdf). For readable text message key "msg" should be used.

Attribute "p" (payload) must contrains arbitrary number of 3 element arrays
(0x93).
First element should contrain purpose (integer) from JSON shown before.
Second element should contain currency identified (binary) Using string type
as currecy identifier also permitted, but only if currency identifier contains
just ASCII characters with codes 32-126).
Third element should contain amount (integer). This field MUST be only
integer and MUST NOT be float or any other types.
If array contains more than 3 elements, extra elements shoud be ignored (it
might be array generated by software with newer version of protocol).
Clients MUST NOT add extra fields to array when creating transaction, because
it might break compatibility with new versions.

here is an example of whole transaction (190 bytes) encoded in base64
g6Rib2R5xD+HoWWAoWbECIAAIAACAAADoWsQoXCSkwCjWFhYCpMBo0ZFRRShcwWhdM8AAAFkQXBXF6J0b8QIgAAgAAIAAAWkc2lnboHEIQPoKI4bYEc4uTuycqS/ipQHaHjEx3SZTp/hqIIVLE9L88RHMEUCIQD4jWcnksiFrUIZvCv4sjD9ustDe62c5PpQwuNA71Ys7QIgKhKkBd2LPsn6ryJs+FA+ZSOebqaXlokbJGofDVSPYQSjdmVyAg==

unpacking of this tx will give (all binaried encoded in base64)
{
  "body" => h6FlgKFmxAiAACAAAgAAA6FrEKFwkpMAo1hYWAqTAaNGRUUUoXMFoXTPAAABZEFwVxeidG/ECIAAIAACAAAF
    "sign" => {
      A+gojhtgRzi5O7JypL+KlAdoeMTHdJlOn+GoghUsT0vz =>
        MEUCIQD4jWcnksiFrUIZvCv4sjD9ustDe62c5PpQwuNA71Ys7QIgKhKkBd2LPsn6ryJs+FA+ZSOebqaXlokbJGofDVSPYQQ=
    },
    "ver" => 2
}

after unpacking body (63 bytes) will be (binaries encoded in hex)
{
  "k" => 16,
  "f" => 0x8000200002000003,
  "to" => 0x8000200002000005,
  "s" => 5,
  "t" => 1530106238743,
  "p" => [
    [0,"XXX",10],
    [1,"FEE",20]
  ],
  "e" => #{}
}

this transaction transfers 10 tokens named XXX from address 0x8000200002000003 
to 0x8000200002000005 and pays 20 tokens named FEE for this transaction.
Kind - 16 (generic version 2)
Tx nonce - 5, timestamp - 1530106238743 (2018-06-27 13:30:38.743 UTC).
And there is no extra data.

Private key used for signing this transaction is (encoded in base64)
LwNyxasiTb1vNcbRf51iltMDGQvijI515PVrpphmZSA=
YOU MUST NOT USE THIS PRIVATE KEY ANYWHERE, or you money will be stolen.

